<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Archiver\Zip;
use Drupal\Core\Archiver\ArchiverException;

/**
 * Implements hook_help().
 */
function dfg_3dviewer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wisski_iip_image':
      return '<p>' . t('This is the WissKI module for the integration ' .
        'of IIP (https://iipimage.sourceforge.io/).') . '</p>';
  }
}

function in_arrayi($needle, $haystack)
{
	return in_array(strtolower($needle), array_map('strtolower', $haystack));
}

function array_searchi($needle, $haystack)
{
	return array_search(strtolower($needle), array_map('strtolower', $haystack));
}

function url_exists ($url) {
	return str_contains(get_headers($url)[0], "200 OK");
}

function semi_automatic_path ($prefix, $filename, $filenameArchive, &$autoPath) {
	$allowedFormats = array('obj', 'fbx', 'ply', 'dae', 'ifc', 'stl', 'xyz', 'pcd', 'json', '3ds');
	$prefix = "/var/www/html/3drepository" . $prefix;
	$autoPath = '';
	if ($filenameArchive === '') $filenameArchive = $filename;
	if(!file_exists($prefix . "/gltf/" . $filename . ".glb")) {
		if(!file_exists($prefix . "/gltf/" . $filenameArchive . ".glb")) {
			foreach ($allowedFormats as $value) {
				$autoPath = $prefix . "/" . $filenameArchive . "." . $value;
				if(!file_exists($autoPath)) {
					$autoPath = '';
				}
			}
		}
		else
		{
			$autoPath = $prefix . "/gltf/" . $filenameArchive . ".glb";
		}
	}
	else
	{
		$autoPath = $prefix . "/gltf/" . $filename . ".glb";
	}
	if ($autoPath === '') {
		foreach ($allowedFormats as $value) {
			$autoPath = $prefix . "/" . $filenameArchive . "." . $value;
			if(!file_exists($autoPath)) {
				$autoPath = '';
			}
		}
	}
}

/**
* Implements hook_file_validate().
 */
function dfg_3dviewer_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
	#\Drupal::messenger()->addMessage(serialize($entity));
	$archives = array("zip", "rar", "tar", "xz", "gz");
	$base = \Drupal::request()->getSchemeAndHttpHost();
	$output = null;
	$retval = null;
	$autoPath = '';
	if ($entity->bundle() == "file") {
		$file = $entity->toArray();
		$realpath = \Drupal::service('file_system')->realpath($file['uri'][0]['value']);
		$parts = pathinfo($realpath);
		$extension = strtoupper($parts['extension']);
		$newFile = $parts['dirname'] . "/gltf/" . $parts['filename'] . ".glb";
		$newDir = $parts['dirname'] . "/" . $parts['filename'] . "_" . $extension . "/gltf/";
		$isArchive = false;
		if (!file_exists($newFile) && !is_dir($newDir) && !file_exists($newFile."off")) {			
			if (!in_arrayi($extension, $archives)) {
				$output = exec ('/var/www/html/3drepository/modules/dfg_3dviewer/scripts/convert.sh -c true -l 3 -b true -i "' . "$realpath" . '" -f true', $output, $retval);
			}
			elseif (in_arrayi($extension, $archives)) {
				try {
					$isArchive = true;
					$extractPath = $parts['dirname'] . "/" . $parts['filename'] . "_" . $extension . "/";
					if ($extension == 'ZIP') {
						$zip = new Zip($realpath);
						$zip->extract($extractPath);
						$zip->remove($realpath);
						$archiveFiles = scandir ($extractPath);
						foreach ($archiveFiles as $zipFile) {
							$partsZip = pathinfo($zipFile);					
							switch (strtolower($partsZip["extension"])) {
								case "obj":
								case "fbx":
								case "ply":
								case "dae":
								case "abc":
								case "blend":
								case "stl":
								case "wrl":
								case "x3d":
								case "ifc":
								case "glb":
								case "gltf":
									exec ('/var/www/html/3drepository/modules/dfg_3dviewer/scripts/convert.sh -c true -l 3 -b true -i "' . $extractPath . $zipFile . '" -o "' . $extractPath . '" -f true -a false', $output, $retval);										
								break;
							}
						}
					}
					elseif ($extension == 'RAR') {
						$output = shell_exec('/var/www/html/3drepository/modules/dfg_3dviewer/scripts/uncompress.sh -t rar -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
					elseif ($extension == 'TAR' || $extension == 'GZ' ) {
						$output = shell_exec('/var/www/html/3drepository/modules/dfg_3dviewer/scripts/uncompress.sh -t tar -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
					elseif ($extension == 'XZ') {
						$output = shell_exec('/var/www/html/3drepository/modules/dfg_3dviewer/scripts/uncompress.sh -t xz -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
				}
				catch (ArchiverException $exception) {
					\Drupal::messenger()->addMessage("Exception while handling archive: " . serialize($exception), 'status');
				}
			}
			else {
				\Drupal::messenger()->addMessage($extension . " is not supported yet", 'warning');
			}
			#semi-automatic path change
			//$entity->set('faa602a0be629324806aef22892cdbe5', $autoPath);
			if ($retval === null) {
				\Drupal::messenger()->addMessage($output, 'status');
			}
			else if ($retval === 1) {
				\Drupal::messenger()->addMessage(serialize($output), 'warning');
			}
			else if ($retval === 2) {
			\Drupal::messenger()->addMessage(serialize($output), 'error');
			}
		}
	}
	if($entity->bundle() == "bd3d7baa74856d141bcff7b4193fa128") {
		$file_info = $entity->fbf95bddee5160d515b982b3fd2e05f7->getValue();
		$file_id = $file_info[0]['target_id'];
		$file = \Drupal\file\Entity\File::load($file_id);
		clearstatcache();
		if (!is_null($file)) {
			$fileName = $file->getFilename();
			$extension = pathinfo($fileName, PATHINFO_EXTENSION);
			$fileBase = str_replace(".$extension", "", $fileName);

			#$entity->set('fa554b216188fd7c52502e8e17509f9d', $fileName);
			#$entity->set('fa554b216188fd7c52502e8e17509f9d', array("en" => array(array("target_id" => $fileName))));
			$file_url = \Drupal::service('file_url_generator')->generate($file->getFileUri());
			$viewBase = "";
			$path = "";
			#is archive
			if (in_arrayi($extension, $archives)) {
				$path = str_replace($fileName, "", $file_url->toString());
				$subPath = substr($path, 0, strrpos( $path, '/') );
				$viewBase = $base . $subPath . "/" . $fileBase . "_" . strtoupper($extension) . "/views/" . $fileBase;
				$fileBaseArchive = preg_replace('/_[0-9]+$/', '', $fileBase, 1);
				if (!url_exists($viewBase . "_side45.png")) {
					$subPath = substr($path, 0, strrpos( $path, '/') );
					$viewBase = $base . $subPath . "/" . $fileBase . "_" . strtoupper($extension) . "/views/" . $fileBaseArchive;
				}
			}
			else
			{
				$path = str_replace($fileName, "views/" . $fileName, $file_url->toString());
				$viewBase = $base . $path;
				if (!url_exists($viewBase . "_side45.png")) {
					$subPath = substr($path, 0, strrpos( $path, '/') );
					//$path = str_replace($fileName, "", $file_url->toString());
					//$fileBaseStripped = preg_replace('/_[0-9]+$/', '', $fileBase, 1);
					$viewBase = $base . $subPath . "/" . $fileBase;
					if (!url_exists($viewBase . "_side45.png")) {
						$viewBase = $base . $subPath . "/views/" . $fileBase;
					}
				}
			}

			$viewBase = str_replace(' ', '%20', $viewBase);
			clearstatcache();
			if (url_exists($viewBase . "_side45.png")) {
				\Drupal::messenger()->addMessage("Renderings were added to the entity");
				$entity->set('f605dc6b727a1099b9e52b3ccbdf5673', array($viewBase . "_side45.png", $viewBase . "_side0.png", $viewBase . "_side90.png", $viewBase . "_side135.png", $viewBase . "_side180.png", $viewBase . "_side225.png", $viewBase . "_side270.png", $viewBase . "_side315.png", $viewBase . "_top.png"));
			}
			$fpath = $file_url->toString();
			$fpath = str_replace($fileName, "", $fpath);
			$subPath = substr($fpath, 0, strrpos( $fpath, '/') );
			//$fileBase = $parts['filename'];
			$fileBaseArchive = preg_replace('/_[0-9]+$/', '', $fileBase, 1);
			if (in_arrayi($extension, $archives)) {
				semi_automatic_path ($subPath . '/' . $fileBase . "_" . strtoupper($extension), $fileBase, $fileBaseArchive, $autoPath);
			}
			else {
				semi_automatic_path ($subPath, $fileBase, '', $autoPath);
			}
			$origPath = $subPath . "/gltf/" . $fileBase . ".glb";
			$origArchPath = $subPath . '/' . $fileBase . "_" . strtoupper($extension) . "/gltf/" . $fileBase . ".glb";
			if ((!$isArchive && strcmp($origPath, $autoPath) !== 0) || ($isArchive && strcmp($origArchPath, $autoPath) !== 0)) {
				\Drupal::messenger()->addMessage("GLTF or file with given name (possible archive/filename mismatch) representation not found, semi-automatic path applied\n", 'warning');
			}
			else if (($autoPath))
			{
				if ($isArchive) {
					$autoPath = $origArchPath;
				}
				else {
					$autoPath = $origPath;
				}
			}
			$autoPath = str_replace("/var/www/html/3drepository", "https://3d-repository.hs-mainz.de", $autoPath);
			//\Drupal::messenger()->addMessage($fileBase, 'status');
			/*\Drupal::messenger()->addMessage($file_url->toString());
			\Drupal::messenger()->addMessage(file_exists($viewBase . "_side45.png"));
			\Drupal::messenger()->addMessage($fileName);
			\Drupal::messenger()->addMessage($path);*/
			$entity->set('faa602a0be629324806aef22892cdbe5', $autoPath);
		}
	}
	#$file = $entity->fbda64e9ba217e59e5fc5f99244f4821;
	//$compression = $entity->field_3d_compression_level;
	//\Drupal::messenger()->addMessage(serialize($entity), 'status');
}